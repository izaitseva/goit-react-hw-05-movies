{"version":3,"file":"static/js/134.886efec7.chunk.js","mappings":"uSAEMA,EAAG,+BAEHC,EAAM,mCACNC,EAAU,UAAMF,EAAN,iCAAkCC,GAIrCE,EAAoB,SAACC,GAC9B,OAAOC,EAAAA,EAAAA,IAAA,UAAaH,EAAb,kBAAiCE,GAC3C,EAEYE,EAAsB,WAC/B,OAAOD,EAAAA,EAAAA,IAAA,UAXW,+CAWX,oBAAsCJ,GAChD,EAEYM,EAAe,SAACC,GACzB,OAAOH,EAAAA,EAAAA,IAAA,UAAaL,EAAb,kBAA0BQ,EAA1B,oBAA6CP,GACvD,EAEYQ,EAAW,SAACC,GACrB,MAAM,GAAN,OAfc,mCAed,OAAsBA,EACzB,EAEYC,EAAkB,SAACH,GAC5B,OAAOH,EAAAA,EAAAA,IAAA,UAAaL,EAAb,kBAA0BQ,EAA1B,4BAAqDP,GAC/D,EAEYW,EAAU,SAACJ,GACpB,OAAOH,EAAAA,EAAAA,IAAA,UAAaL,EAAb,kBAA0BQ,EAA1B,4BAAqDP,GAC/D,C,sJCzBc,SAASY,IAEpB,OAAsCC,EAAAA,EAAAA,IAAgB,CAAEC,MAAO,KAA/D,eAAOX,EAAP,KAAoBY,EAApB,KACA,GAA0CC,EAAAA,EAAAA,UAAS,IAAnD,eAAOC,EAAP,KAAsBC,EAAtB,KACA,GAA0BF,EAAAA,EAAAA,UAAS,IAAnC,eAAOF,EAAP,KAAcK,EAAd,KACA,GAA0BH,EAAAA,EAAAA,WAAS,GAAnC,eAAOI,EAAP,KAAcC,EAAd,KACMC,GAAWC,EAAAA,EAAAA,MAEXC,EAAOrB,EAAYsB,IAAI,SA6B7B,OAZAC,EAAAA,EAAAA,YAAU,YACNxB,EAAAA,EAAAA,IAAkBsB,GACbG,MAAK,SAAAC,GACF,IAAMC,EAASD,EAAIE,KAAKC,QAExBb,EAAiBW,EACpB,IACAG,OAAM,WACHX,GAAS,EACZ,GACR,GAAE,CAACG,KAGA,0BACI,2BACKJ,IAAS,SAAC,UAAD,KACV,kBAAMa,SA1BG,SAACC,GAClBA,EAAEC,iBAEmB,KAAjBrB,EAAMsB,QAGVrB,EAAe,CAAED,MAAAA,GACpB,EAmBW,WACI,kBAAOuB,YAAY,6BAA6BC,SAhCrC,SAAAJ,GACvB,IAAMK,EAAiBL,EAAEM,OAAOC,MAAMC,cACtCvB,EAASoB,EACZ,EA6B6FE,MAAO3B,KACrF,mBAAQ6B,KAAK,SAAb,wBAEJ,wBAEQ1B,EAAc2B,KAAI,SAAAC,GAAU,IAAD,EAEvB,OACI,yBACI,SAAC,KAAD,CAAMC,IAAIC,EAAAA,EAAAA,IAAaC,EAAAA,EAAAA,aAAoB,CAAEzC,QAASsC,EAAMI,KAAOC,MAAO,CAAEC,KAAM7B,GAAlF,mBAA+FuB,EAAMO,aAArG,QAA8GP,EAAMQ,kBAD/GR,EAAMI,GAItB,UAMxB,C,2GC9Dc,SAASK,IACpB,IAAMC,GAAWC,EAAAA,EAAAA,MAQjB,OANA9B,EAAAA,EAAAA,YAAU,WACN+B,YAAW,WACPF,EAASP,EAAAA,EAAAA,KACZ,GAAE,KACN,KAGG,4BACI,iDACA,gBAAKU,IAAI,+EAA+EC,IAAI,YAGvG,C","sources":["moviesAPI.jsx","pages/Movies.jsx","pages/NotFound.jsx"],"sourcesContent":["import axios from \"axios\";\n\nconst URL = `https://api.themoviedb.org/3`\nconst TOP_RATED_URL = \"https://api.themoviedb.org/3/movie/top_rated\";\nconst KEY = \"c86b3c21f50eab5c7ad4f0c864f19af2\";\nconst SEARCH_URL = `${URL}/search/movie?api_key=${KEY}`;\n\nconst IMAGE_URL = \"https://image.tmdb.org/t/p/w500\";\n\nexport const fetchSearchMovies = (movieSearch) => {\n    return axios.get(`${SEARCH_URL}&query=${movieSearch}`);\n}\n\nexport const fetchTopRatedMovies = () => {\n    return axios.get(`${TOP_RATED_URL}?api_key=${KEY}`)\n}\n\nexport const getMovieById = (movieId) => {\n    return axios.get(`${URL}/movie/${movieId}?api_key=${KEY}`)\n}\n\nexport const imageUrl = (imagePath) => {\n    return `${IMAGE_URL}${imagePath}`;\n}\n\nexport const getMovieReviews = (movieId) => {\n    return axios.get(`${URL}/movie/${movieId}/reviews?api_key=${KEY}`);\n}\n\nexport const getCast = (movieId) => {\n    return axios.get(`${URL}/movie/${movieId}/credits?api_key=${KEY}`);\n}","import { generatePath, Link, useLocation, useSearchParams } from \"react-router-dom\";\nimport { useEffect, useState } from \"react\"\nimport { fetchSearchMovies } from \"moviesAPI\";\nimport NotFound from \"./NotFound\";\nimport { paths } from \"components/paths/paths\";\n\nexport default function Movies() {\n\n    const [movieSearch, setMovieSearch] = useSearchParams({ query: \"\" });\n    const [searchResults, setSearchResults] = useState([]);\n    const [query, setQuery] = useState(\"\");\n    const [error, setError] = useState(false);\n    const location = useLocation();\n\n    const link = movieSearch.get(\"query\");\n\n    const handleChangeSearch = e => {\n        const newSearchValue = e.target.value.toLowerCase();\n        setQuery(newSearchValue);\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        if (query.trim() === '') {\n            return;\n        }\n        setMovieSearch({ query });\n    }\n\n\n    useEffect(() => {\n        fetchSearchMovies(link)\n            .then(res => {\n                const movies = res.data.results;\n\n                setSearchResults(movies);\n            })\n            .catch(() => {\n                setError(true);\n            });\n    }, [link])\n\n    return (\n        <div>\n            <div>\n                {error && <NotFound />}\n                <form onSubmit={handleSubmit}>\n                    <input placeholder=\"Let's find a movie for you\" onChange={handleChangeSearch} value={query}></input>\n                    <button type=\"submit\">Search</button>\n                </form>\n                <ul>\n                    {\n                        searchResults.map(movie => {\n\n                            return (\n                                <li key={movie.id}>\n                                    <Link to={generatePath(paths.movieDetails, { movieId: movie.id })} state={{ from: location }}>{movie.title ?? movie.original_title}</Link>\n                                </li>\n                            )\n                        })\n                    }\n                </ul>\n            </div>\n        </div>\n    )\n}","import { paths } from \"components/paths/paths\";\nimport { useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n\nexport default function NotFound() {\n    const navigate = useNavigate();\n\n    useEffect(() => {\n        setTimeout(() => {\n            navigate(paths.home)\n        }, 1750);\n    })\n\n    return (\n        <div>\n            <h1> Page is not found </h1>\n            <img src=\"https://i.pinimg.com/originals/11/dc/96/11dc96d2e4daca3ea8ff6aa41299b5e1.gif\" alt=\"what?\"></img>\n        </div>\n    )\n}"],"names":["URL","KEY","SEARCH_URL","fetchSearchMovies","movieSearch","axios","fetchTopRatedMovies","getMovieById","movieId","imageUrl","imagePath","getMovieReviews","getCast","Movies","useSearchParams","query","setMovieSearch","useState","searchResults","setSearchResults","setQuery","error","setError","location","useLocation","link","get","useEffect","then","res","movies","data","results","catch","onSubmit","e","preventDefault","trim","placeholder","onChange","newSearchValue","target","value","toLowerCase","type","map","movie","to","generatePath","paths","id","state","from","title","original_title","NotFound","navigate","useNavigate","setTimeout","src","alt"],"sourceRoot":""}