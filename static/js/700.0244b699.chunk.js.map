{"version":3,"file":"static/js/700.0244b699.chunk.js","mappings":"uSAEMA,EAAG,+BAEHC,EAAM,mCACNC,EAAU,UAAMF,EAAN,iCAAkCC,GAIrCE,EAAoB,SAACC,GAC9B,OAAOC,EAAAA,EAAAA,IAAA,UAAaH,EAAb,kBAAiCE,GAC3C,EAEYE,EAAsB,WAC/B,OAAOD,EAAAA,EAAAA,IAAA,UAXW,+CAWX,oBAAsCJ,GAChD,EAEYM,EAAiB,SAACC,GAC3B,OAAOH,EAAAA,EAAAA,IAAA,UAAaL,EAAb,kBAA0BQ,EAA1B,oBAA6CP,GACvD,EAEYQ,EAAW,SAACC,GACrB,MAAM,GAAN,OAfc,mCAed,OAAsBA,EACzB,EAEYC,EAAkB,SAACH,GAC5B,OAAOH,EAAAA,EAAAA,IAAA,UAAaL,EAAb,kBAA0BQ,EAA1B,4BAAqDP,GAC/D,EAEYW,EAAU,SAACJ,GACpB,OAAOH,EAAAA,EAAAA,IAAA,UAAaL,EAAb,kBAA0BQ,EAA1B,4BAAqDP,GAC/D,C,sBC/BD,SAASY,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQC,EAAKC,GACpE,IACE,IAAIC,EAAOP,EAAIK,GAAKC,GAChBE,EAAQD,EAAKC,KAInB,CAHE,MAAOC,GAEP,YADAP,EAAOO,EAET,CAEIF,EAAKG,KACPT,EAAQO,GAERG,QAAQV,QAAQO,GAAOI,KAAKT,EAAOC,EAEvC,C,yICRe,SAASS,IACpB,OAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAA0BF,EAAAA,EAAAA,WAAS,GAAnC,eAAOL,EAAP,KAAcQ,EAAd,KACA,GAA8BH,EAAAA,EAAAA,WAAS,GAAvC,eAAOI,EAAP,KAAgBC,EAAhB,KAqBA,OAnBAC,EAAAA,EAAAA,YAAU,WAEN,IAAMC,EAAU,eDGkBC,ECHlB,GDGkBA,ECHlB,UAAG,sGAGXH,GAAW,GAHA,UAIY3B,EAAAA,EAAAA,MAJZ,gBAIH+B,EAJG,EAIHA,KACRP,EAAUO,EAAKC,SALJ,gDAOXP,GAAS,GAPE,yBASXE,GAAW,GATA,2EDIlB,WACL,IAAIM,EAAOC,KACPC,EAAOC,UACX,OAAO,IAAIjB,SAAQ,SAAUV,EAASC,GACpC,IAAIF,EAAMsB,EAAGO,MAAMJ,EAAME,GAEzB,SAASxB,EAAMK,GACbT,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,OAAQI,EAClE,CAEA,SAASJ,EAAO0B,GACd/B,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,QAAS0B,EACnE,CAEA3B,OAAM4B,EACR,GACF,GCpBsB,qDAahBV,GAEH,GAAE,KAGC,2BACKZ,IAAS,SAACuB,EAAA,QAAD,IACTd,IAAW,2CACZ,4CACA,wBACKH,EAAOkB,KAAI,SAAAC,GAAK,aACb,yBACI,SAAC,KAAD,CAAMC,IAAIC,EAAAA,EAAAA,IAAaC,EAAAA,EAAAA,aAAoB,CAAE3C,QAASwC,EAAMI,KAA5D,mBAAoEJ,EAAMK,aAA1E,QAAmFL,EAAMM,kBADpFN,EAAMI,GADF,QAQhC,C,2GCxCc,SAASN,IACpB,IAAMS,GAAWC,EAAAA,EAAAA,MAQjB,OANAtB,EAAAA,EAAAA,YAAU,WACNuB,YAAW,WACPF,EAASJ,EAAAA,EAAAA,KACZ,GAAE,KACN,KAGG,4BACI,iDACA,gBAAKO,IAAI,+EAA+EC,IAAI,YAGvG,C","sources":["moviesAPI.jsx","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","pages/Home.jsx","pages/NotFound.jsx"],"sourcesContent":["import axios from \"axios\";\n\nconst URL = `https://api.themoviedb.org/3`\nconst TOP_RATED_URL = \"https://api.themoviedb.org/3/movie/top_rated\";\nconst KEY = \"c86b3c21f50eab5c7ad4f0c864f19af2\";\nconst SEARCH_URL = `${URL}/search/movie?api_key=${KEY}`;\n\nconst IMAGE_URL = \"https://image.tmdb.org/t/p/w500\";\n\nexport const fetchSearchMovies = (movieSearch) => {\n    return axios.get(`${SEARCH_URL}&query=${movieSearch}`);\n}\n\nexport const fetchTopRatedMovies = () => {\n    return axios.get(`${TOP_RATED_URL}?api_key=${KEY}`)\n}\n\nexport const fetchMovieById = (movieId) => {\n    return axios.get(`${URL}/movie/${movieId}?api_key=${KEY}`)\n}\n\nexport const imageUrl = (imagePath) => {\n    return `${IMAGE_URL}${imagePath}`;\n}\n\nexport const getMovieReviews = (movieId) => {\n    return axios.get(`${URL}/movie/${movieId}/reviews?api_key=${KEY}`);\n}\n\nexport const getCast = (movieId) => {\n    return axios.get(`${URL}/movie/${movieId}/credits?api_key=${KEY}`);\n}","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}","import { fetchTopRatedMovies } from \"moviesAPI\";\nimport NotFound from \"./NotFound\";\nimport { paths } from \"components/paths/paths\";\nimport { useEffect, useState } from \"react\"\nimport { generatePath, Link } from \"react-router-dom\";\n\nexport default function Home() {\n    const [movies, setMovies] = useState([]);\n    const [error, setError] = useState(false);\n    const [loading, setLoading] = useState(false);\n\n    useEffect(() => {\n\n        const fetchMovie = async () => {\n\n            try {\n                setLoading(true);\n                const { data } = await fetchTopRatedMovies();\n                setMovies(data.results)\n            } catch {\n                setError(true)\n            } finally {\n                setLoading(false);\n            }\n        }\n\n        fetchMovie();\n\n    }, []);\n\n    return (\n        <div>\n            {error && <NotFound />}\n            {loading && <p>Please wait...</p>}\n            <h2>Trending Today</h2>\n            <ul>\n                {movies.map(movie => (\n                    <li key={movie.id}>\n                        <Link to={generatePath(paths.movieDetails, { movieId: movie.id })}>{movie.title ?? movie.original_title}</Link>\n                    </li>\n                ))}\n            </ul>\n        </div>\n    )\n}","import { paths } from \"components/paths/paths\";\nimport { useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n\nexport default function NotFound() {\n    const navigate = useNavigate();\n\n    useEffect(() => {\n        setTimeout(() => {\n            navigate(paths.home)\n        }, 1750);\n    })\n\n    return (\n        <div>\n            <h1> Page is not found </h1>\n            <img src=\"https://i.pinimg.com/originals/11/dc/96/11dc96d2e4daca3ea8ff6aa41299b5e1.gif\" alt=\"what?\"></img>\n        </div>\n    )\n}"],"names":["URL","KEY","SEARCH_URL","fetchSearchMovies","movieSearch","axios","fetchTopRatedMovies","fetchMovieById","movieId","imageUrl","imagePath","getMovieReviews","getCast","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","then","Home","useState","movies","setMovies","setError","loading","setLoading","useEffect","fetchMovie","fn","data","results","self","this","args","arguments","apply","err","undefined","NotFound","map","movie","to","generatePath","paths","id","title","original_title","navigate","useNavigate","setTimeout","src","alt"],"sourceRoot":""}